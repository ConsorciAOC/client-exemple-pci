plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'cat.aoc.client_pci'
version = 'BETA-1.0.0'

sourceCompatibility = '17'
targetCompatibility = '17'
def projectEncoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
    jaxb
}

dependencies {
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1' // JAXB API
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '3.0.1' // JAXB reference implementation (curiously with com.sun coordinates)
    implementation group: 'com.sun.xml.bind', name: 'jaxb-core', version: '3.0.1'

    // necessary for generating JAVA classes with 'jaxb' gradle task
    jaxb(
            'com.sun.xml.bind:jaxb-impl:3.0.1', // JAXB Impl
            'com.sun.xml.bind:jaxb-xjc:3.0.1', // XJC tools
            'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1',
    )

    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.ws:spring-ws-security'

    // Lombok
    compileOnly('org.projectlombok:lombok:1.18.22')
    annotationProcessor('org.projectlombok:lombok:1.18.22')

    // Testing dependencies
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'

}

test {
    useJUnitPlatform()
}

def jaxb = tasks.register("jaxb") {
    description 'Convert XSD\'s to java classes'

    def srcDir = file("src/main/java")
    project.delete(files("${srcDir}/generated"))

    // Restricts access to the protocols specified for external references set by the schemaLocation attribute, import element, and include element.
    System.setProperty('javax.xml.accessExternalDTD', 'all')
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    ant.taskdef(
            name: 'xjc',
            classname: 'com.sun.tools.xjc.XJCTask',
            classpath: configurations.jaxb.asPath
    )
    ant.jaxbTargetDir = srcDir
    def xsdParentDir = file("src/main/resources/xsd")
    doLast {
        // Convert PCI (generic) XSD's
        def xsdPCIDir = file("${xsdParentDir}/pci")
        xsdPCIDir.eachDir(xsdProjectDir -> {
            def packageName = ('generated.pci.' + xsdProjectDir.name)
            println('Genearating source code from: ' + xsdProjectDir.name)
            ant.xjc(destdir: srcDir,
                    package: packageName){
                schema(dir: xsdProjectDir.getAbsoluteFile(), includes: "**/*.xsd")
                arg(value: "-encoding")
                arg(value: projectEncoding)
            }
        })
        // Convert SERVICES (specific) XSD's
        def xsdServicesDir = file("${xsdParentDir}/serveis")
        xsdServicesDir.eachDir(xsdProjectDir -> {
            def packageName = ('generated.serveis.' + xsdProjectDir.name)
            def projectWithBindings = !fileTree(xsdProjectDir.getAbsolutePath()).filter { file ->
                file.name.contains('.xjb')
            }.isEmpty()
            if (projectWithBindings) {
                println('Genearating source code from: ' + xsdProjectDir.name + ' (bindings found)')
                ant.xjc(destdir: srcDir,
                        package: packageName){
                    schema(dir: xsdProjectDir.getAbsoluteFile(), includes: "**/*.xsd")
                    binding(dir: xsdProjectDir.getAbsoluteFile(), includes: "**/*.xjb")
                    arg(value: "-extension")
                    arg(value: "-encoding")
                    arg(value: projectEncoding)
                }
            } else {
                println('Genearating source code from: ' + xsdProjectDir.name)
                ant.xjc(destdir: srcDir,
                        package: packageName){
                    schema(dir: xsdProjectDir.getAbsoluteFile(), includes: "**/*.xsd")
                    arg(value: "-encoding")
                    arg(value: projectEncoding)
                }
            }
        })
    }
}

compileJava {options.encoding = projectEncoding}
compileJava.dependsOn jaxb

bootJar {enabled = false}
jar {enabled = true}
